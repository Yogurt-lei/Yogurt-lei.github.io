import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as l,b as e}from"./app.5eaf0eaa.js";const r="/images/launch-pad/others/gitflow.png",t={},h=e('<h1 id="开发规范" tabindex="-1"><a class="header-anchor" href="#开发规范" aria-hidden="true">#</a> 开发规范</h1><h2 id="文档介绍" tabindex="-1"><a class="header-anchor" href="#文档介绍" aria-hidden="true">#</a> 文档介绍</h2><p>作为一个有组织和纪律的团队，规范是必须的，毕竟每个coder都有自己的一套风格和规范，为了以后团队的和谐发展，结合业界的开发经验，故而写出了一个相对是大而简洁的文档，希望能对大家有所启发。</p><h2 id="后端规范" tabindex="-1"><a class="header-anchor" href="#后端规范" aria-hidden="true">#</a> 后端规范</h2><h3 id="数据库使用规范" tabindex="-1"><a class="header-anchor" href="#数据库使用规范" aria-hidden="true">#</a> 数据库使用规范</h3><p>关系型数据库的使用，注意 以下几点：</p><ol><li>禁止任何跨库的联表查询。</li><li>每一张表，都必须在逻辑上有一个“属主”应用。除了属主，其他应用不许在这个表上做任何写操作。</li><li>如果一个应用要读属主是其他应用的表（这种情况某些场景下是合理存在），必须经过应用架构评审同意。</li><li>建表语句要经过DBA审核，尤其是索引字段创建。</li><li>建表要预估数据量，如果估计数据量大于500万，需提交架构评审，我们对大表会评估特定的分布式解决方案。</li></ol><h2 id="前端规范" tabindex="-1"><a class="header-anchor" href="#前端规范" aria-hidden="true">#</a> 前端规范</h2><h3 id="注释规范" tabindex="-1"><a class="header-anchor" href="#注释规范" aria-hidden="true">#</a> 注释规范</h3><ol><li>vue注释: 注释格式 , 只能在注释的始末位置,不可置入注释文字区域</li><li>&lt;!-- 头部 --&gt; &lt;!-- //头部 --&gt;包围，请务必要分开注释的文字（即注释文字中加空格）</li><li>css注释: 注释格式 ;/ **/</li><li>JavaScript注释, 单行注释使用’//这儿是单行注释’ ,多行注释使用 ;/ **/</li></ol><h3 id="图片规范" tabindex="-1"><a class="header-anchor" href="#图片规范" aria-hidden="true">#</a> 图片规范</h3><ol><li>每个模块都会增加一个图片文件夹，方便后期维护和处理，请将同一个模块的图片放在同一个文件夹里面，图片文件命名尽量跟css文件的命名相同，尽量使用小写命名</li><li>图片格式仅限于gif || png || jpg</li><li>命名全部用小写英文字母 || 数字 || -(统一用分划线衔接) 的组合，其中不得包含汉字 || 空格 || 特殊字符；尽量用易懂的词汇, 便于团队其他成员理解; 另, 命名分头尾两部分, 用分划线隔开, 比如ad-left01.gif || btn-submit.gif</li><li>在保证视觉效果的情况下选择最小的图片格式与图片质量, 以减少加载时间</li><li>尽量避免使用半透明的png图片(若使用, 请参考css规范相关说明)</li><li>运用css sprite技术集中小的背景图或图标( 图标图片按页面或模块需要，多个小图标整合一张图片 ), 减小页面http请求</li></ol><h3 id="文件规范" tabindex="-1"><a class="header-anchor" href="#文件规范" aria-hidden="true">#</a> 文件规范</h3><ol><li>所有图片文件归档至assets目录（该目录中按模块划分存放区域）</li><li>所有定义请求后端函数方法归档至api目录（该目录中按模块划分存放区域）</li><li>所有页面文件归档至view目录（该目录中按模块划分存放区域）; 模块目录命名, 小驼峰式命名. 如iTaoLun; 页面命名, 大驼峰式命名. 如ITaoLun</li><li>公用函数方法归档至utils目录</li><li>公用样式库归档至styles目录</li><li>公用组件归档至components目录 (分全局组件和局部组件, 全局组件放根目录下components目录, 局部组件放模块内components目录); 另组件文件命名, 大驼峰式命名. 如ITaoLun</li></ol><h3 id="vue规范" tabindex="-1"><a class="header-anchor" href="#vue规范" aria-hidden="true">#</a> Vue规范</h3><ol><li>文件编码统一为utf-8；统一的代码缩进（默认设置2个空格）与格式化（Idea默认格式化）</li><li>开发过程中单个文件不允许超过600行, 特别复杂的功能, 文件不允许超过1000行</li><li>每个组件需要name, 且尽量为多个名词, 不容易重复</li><li>组件内data必须是个函数</li><li>组件内如有需要prop, 尽可能对每个定义字段加上适当注释说明</li><li>组件可复用或可剥离部分代码，建议用提取其内容定义新组件，当前组件引用即可</li><li>组件内局部样式尽可能加上作用域修饰（scoped），这样不会影响到其他组件</li><li>组件中JS和CSS部分定义规范，见（<strong>JavaScript规范</strong> ）与（<strong>CSS规范</strong> ）</li></ol><h3 id="javascript规范" tabindex="-1"><a class="header-anchor" href="#javascript规范" aria-hidden="true">#</a> JavaScript规范</h3><ol><li>变量命名: 小驼峰式命名. 如iTaoLun</li><li>类命名: 大驼峰式命名. 如 ITaoLun</li><li>函数命名: 小写驼峰式命名. 如iTaoLun()</li><li>命名语义化, 尽可能利用英文单词或其缩写</li><li>尽量避免使用存在兼容性及消耗资源的方法或属性, 比如eval() &amp; innerText</li><li>代码结构明了, 每个自定义函数都需要说明函数作用, 函数内部加适量注释, 提高函数重用率</li></ol><h3 id="css规范" tabindex="-1"><a class="header-anchor" href="#css规范" aria-hidden="true">#</a> CSS规范</h3><ol><li>公用文件: 协作开发过程中，会引入默认的base.css(里面包括了css reset、常用的css间距，css字体，css大小等，详细参见base.css)；</li><li>class与id命名: 样式名称由小写英文、数字和 _ 来组合命名, 如i_comment, fronted, width200; 避免使用中文拼音, 尽量使用简易的单词组合；命名要语义化, 简明化</li><li>css属性书写顺序, 建议遵循: 布局定位属性–&gt;自身属性–&gt;文本属性–&gt;其他属性. 此条可根据自身习惯书写, 但尽量保证同类属性写在一起. 属性列举: 布局定位属性主要包括: display 、 list-style 、 position（相应的 top,right,bottom,left） 、 float &amp; clear 、 visibility 和 overflow； 自身属性主要包括: width 、height 、 margin 、 padding 、 border 和 background; 文本属性主要包括：color 、 font、 text-decoration 、 text-align 、 vertical-align 、 white-space 和其他content; 上面所列出的这些属性只是最常用到的, 并不代表全部</li><li>书写代码前, 考虑并提高样式重复使用率</li><li>背景图片请尽可能使用sprite技术, 减小http请求, 考虑到多人协作开发, sprite按模块制作</li><li>必须为大区块样式添加注释, 小区块适量注释</li></ol><h2 id="版本控制规范" tabindex="-1"><a class="header-anchor" href="#版本控制规范" aria-hidden="true">#</a> 版本控制规范</h2><p>gitflow 工作流程, 合并 feature, 创建 PR , CodeReview流程</p><p><img src="'+r+'" alt="gitflow 工作流程"></p><h2 id="非功能性规范" tabindex="-1"><a class="header-anchor" href="#非功能性规范" aria-hidden="true">#</a> 非功能性规范</h2><h3 id="代码提交规范" tabindex="-1"><a class="header-anchor" href="#代码提交规范" aria-hidden="true">#</a> 代码提交规范</h3><p>&quot; git commit log (Angular Standard)</p><h3 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性" aria-hidden="true">#</a> 安全性</h3><ol><li>没有HTTPS，免谈信息安全...</li><li>不能信赖任何前端输入，比如参数中的用户id，需要通过凭证来获取</li><li>分页查询提供默认分页大小，并设置最大pagesize；不分页的查询注意数据量大小</li><li>使用ORM框架，避免手工拼装SQL，防止sql注入</li><li>CORS尽量指定允许的来源域名，避免设置成 *</li><li>关注HTTP Response的大小，一个简单接口返回大量数据的话，很容易写个脚本就把网络出口带宽占满了</li><li>尽量选择主流解决方案，不要使用github上下载的不明来源的jar包依赖水平扩展</li><li>小心避免系统中存在单点</li><li>慎用分布式锁</li></ol><h3 id="可靠性和高可用性" tabindex="-1"><a class="header-anchor" href="#可靠性和高可用性" aria-hidden="true">#</a> 可靠性和高可用性</h3><ol><li>要关注系统数据的可靠性，就是说如果系统挂了，磁盘坏了，数据不能丢， 关键业务数据必须落库。</li><li>要考虑在极端情况下应用的运行状况，如果依赖的其他应用挂了，中间件挂了，甚至数据库挂了，你的应用是不是整个系统里最脆弱的那个点。</li></ol><h3 id="可测试性" tabindex="-1"><a class="header-anchor" href="#可测试性" aria-hidden="true">#</a> 可测试性</h3><ol><li>API接口都要通过swagger提供接口文档，方便自动化测试</li><li>关键业务逻辑模块化，便于单元测试</li><li>对关键系统指标和业务指标的监控</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>“开发规约和最佳实践”，就是制定一些规则，希望大家可以遵守和采用。互联网的前浪用技术声誉来背书这些做法的高收益低成本。至于如果违反了规则，会受什么惩罚，我个人倒没兴趣管这么多，我只关注有没有做到“每个应用做好自己的事”。当然在这里我呼吁大家都做高素质的协作者，如果觉得哪项规定或者demo的写法不合实际，最好能把真实的情况分享出来。当然也热烈欢迎大家贡献自己的文字和代码，把“开发规约和最佳实践”变成为更多人集体智慧的结晶。</p><hr>',35),d=[h];function s(n,o){return a(),l("div",null,d)}const u=i(t,[["render",s],["__file","开发规范.html.vue"]]);export{u as default};
