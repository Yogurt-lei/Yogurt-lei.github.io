import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,b as e}from"./app.129bd772.js";const t="/images/launch-pad/base-java/ThreadLocalMap-ref.png",o={},p=e(`<h1 id="base-java" tabindex="-1"><a class="header-anchor" href="#base-java" aria-hidden="true">#</a> BASE JAVA</h1><h2 id="lamba的底层实现如何" tabindex="-1"><a class="header-anchor" href="#lamba的底层实现如何" aria-hidden="true">#</a> Lamba的底层实现如何</h2><p>函数式接口: @FunctionalInterface 某接口只有一个方法 <strong>(默认方法 静态方法 Object类中方法除外)</strong>, 否则会报错 Lamba原理: 类编译时(javap) 会生成<strong>私有静态方法</strong>: 运行时以内部类方式动态调用该静态函数</p><h3 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> stream</h3><ol><li><code>中间操作</code><ul><li><strong>无状态 Stateless</strong> : 数据处理独立,不影响或依赖之前的数据.<code>filter</code> <code>flatMap</code> <code>map</code> <code>peek</code> <code>unordere</code></li><li><strong>有状态 Stateful</strong>: 记录状态,后面数据处理会依赖前面的状态.<code>distinct</code> <code>sorted</code> <code>limit</code> <code>skip</code></li></ul></li><li><code>终止操作</code><ul><li>非短路操作: 处理完所有数据才能拿到结果.<code>collect</code> <code>count</code> <code>forEach</code> <code>max</code> <code>min</code> <code>reduce</code> <code>toArray</code></li><li>短路操作: 拿到预期结果就结束.<code>anyMatch</code> <code>allMatch</code> <code>noneMatch</code> <code>findFirst</code> <code>findAny</code></li></ul></li></ol><h3 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h3><p>::: danger ⛔ 潜在的OOM风险 :::</p><ul><li><p><code>ExecutorService</code> 中 <code>FixedThreadPool</code> <code>SingleThreadExecutor</code>设置的是无界阻塞队列 <code>LinkedBlockingQueue</code></p></li><li><p><code>ExecutorService</code> 中 <code>CachedThreadPool</code> 设置的最大线程数是 <code>Integer.MAX_VALUE</code> , 其使用 <code>SynchronousQuene</code> 不缓存任务，放入后没有线程就创建</p></li><li><p>线程池参数及其含义</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>
                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>
                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>
                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>
                              <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>
                              <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>
                              <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>核心线程数:</strong> 空闲也不会被销毁, 除非设置 <code>allowCoreThreadTimeOut=true</code></li><li><strong>最大线程数</strong>: 限制的最大线程数量</li><li><strong>空闲线程存活时间</strong>: 如果线程处于空闲且数量大于 <code>corePoolSize</code> 则指定时间后会被销毁</li><li><strong>工作线程阻塞队列</strong>: 达到 <code>corePoolSize</code> 后,新任务会进入到阻塞队列</li><li><strong>拒绝策略:</strong> 工作队列已满后 新任务提交时的拒绝策略</li><li><strong>线程创建工厂:</strong> 线程定制化设置</li></ul></li><li><p>线程池如何回收线程</p><p>提交任务包裹到Worker中, 然后启动worker中的线程 该线程执行 <code>runWorker -&gt; getTask</code> 方法, <strong>请注意,这个方法是死循环,这就是保存线程的秘密</strong></p><ul><li>当前线程数大于最大线程数,那么线程数减1</li><li>如果设置了 <code>allowCoreThreadTimeOut</code> 且当前线程数大于核心线程数 线程数减一</li><li>poll 如果超时没有获取到任务,返回null , runWorker就结束了 不会再次进入 getTask 即回收了一个线程</li></ul></li><li><p>线程池的任务提交过程</p><ul><li>线程数 ≤ <code>corePoolSize</code> ,那么会直接创建线程</li><li>线程数 &gt;<code>corePoolSize</code> , 未填满有界阻塞队列( <code>ArrayBlockingQueue</code>)时,任务放入阻塞队列中</li><li>有界阻塞队列已满, 那么将继续创建线程数 直到 <code>maximumPoolSize</code></li><li>线程数已达到 <code>maximumPoolSize</code> 将执行 <code>RejectedExecutionHandler</code> 设置的拒绝策略</li></ul></li></ul><h2 id="强软弱虚引用" tabindex="-1"><a class="header-anchor" href="#强软弱虚引用" aria-hidden="true">#</a> 强软弱虚引用</h2><ul><li><p>强引用: GC不会回收, 会发生OOM <code>ReferenceQueue</code> 联合使用</p></li><li><p>软引用 <code>SoftReference</code> : 空间足够不会回收, 空间不足会回收</p></li><li><p>弱引用 <code>WeakReference</code> : 扫描到了就会回收</p><p>WeakHashMap的key就是弱引用, <code>ThreadLocal</code> 中的map</p></li><li><p>虚引用 <code>PhantomReference</code> : 任何时候都可能回收 <code>DirectByteBuffer</code> 就是通过他进行堆外空间回收的</p></li></ul><h2 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal" aria-hidden="true">#</a> ThreadLocal</h2><ul><li><p>使用场景</p><ul><li>跨多层方法传递对象</li><li>线程间数据隔离</li><li>事务操作</li><li>session管理</li></ul></li><li><p>实现原理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// t.threadLocals Thread的一个属性引用了ThreadLocalMap</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//会将thread关联上这个map</span>
    <span class="token punctuation">}</span>
    
     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><code>ThreadLocalMap</code> key是 <code>ThreadLocal</code> value是存放的值</p><ul><li><p>内存泄漏</p><p>ThreadLocalMap的key是 弱引用(ThreadLocal为空) 但是value还在 就无法回收了.<strong>所以用完记得手动remove</strong></p><p><img src="`+t+`" alt="ThreadLocalMap-ref.png"></p></li></ul><h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile" aria-hidden="true">#</a> volatile</h2><ul><li>内存可见性和禁止指令重排序</li></ul><p>非原子性 volatile i; i++ 后者是三条指令</p><ul><li>volatile的内存屏障策略非常严格保守，非常悲观且毫无安全感的心态：</li><li>内存可见性</li></ul><p>线程写操作 刷新到主内存</p><p>线程读操作 从主内存读并刷新到工作内存</p><ul><li><p>禁止指令重排序</p><p>volatile修改的变量,在操作时会插入内存屏障,所以操作该变量之前的语句一定先与其后的语句执行</p><p>happens-before as-if-serial</p></li><li><p>内存屏障</p></li><li><p>Load 读 Store 写</p></li></ul><p>volatile 写: StoreStore {code} StoreLoad</p><p>volatile 读: LoadLoad {code} LoadStore</p><h2 id="dcl" tabindex="-1"><a class="header-anchor" href="#dcl" aria-hidden="true">#</a> DCL</h2><p>单列模式</p><ol><li><p>饿汉式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">A</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">A</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>懒汉式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">A</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">A</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span><span class="token constant">INSTANCE</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>DCL <strong>（注意 volatile）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">A</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token keyword">public</span> <span class="token class-name">A</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建空间 -&gt; 初始化A -&gt; INSTANCE引用指向A -&gt; 全过程非原子操作 所以要加锁</span>
      <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  
  <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="堆外内存-如何回收-使用场景" tabindex="-1"><a class="header-anchor" href="#堆外内存-如何回收-使用场景" aria-hidden="true">#</a> 堆外内存 如何回收 使用场景</h2><p>DirectByteBuffer 分配空间时创建Cleaner 关联了Deallocator (Runnable) 请注意：Cleaner是虚引用，当其被gc回收是会触发虚引用关联的引用队列 最终会调用Deallocator中的方法</p><h2 id="map-concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#map-concurrenthashmap" aria-hidden="true">#</a> Map ConcurrentHashMap</h2><p>map底层是数组加链表 默认为16 *0.75=12个数组占位后将触发resize耗时且会死锁, 链表长度大于8会变成红黑树, 少于8会退化为链表</p><p>1.7 并发map 是segment锁实现</p><p>1.8 并发map 是node+cas+synchronized实现</p><h2 id="aqs" tabindex="-1"><a class="header-anchor" href="#aqs" aria-hidden="true">#</a> AQS</h2><p>将请求共享资源的线程封装成CLH锁队列的一个Node，来实现锁的分配。volatile修饰state,cas改变状态成功后就获取锁失败等待</p><h2 id="类加载机制" tabindex="-1"><a class="header-anchor" href="#类加载机制" aria-hidden="true">#</a> 类加载机制</h2><p><strong>加载</strong> classloader 加载class对象</p><ul><li><strong>连接</strong><strong>验证</strong> 文件格式验证、元数据验证、字节码验证、符号引用验证 <strong>准备</strong> static 变量分配空间 初始化为默认值 <strong>解析</strong> 符号引用替换直接引用</li><li><strong>初始化</strong> 静态变量初始化为真实值 <ol><li>创建实例 new 反射 反序列化</li><li>调用类静态方法(字节码 invokestatic)</li><li>调用接口的静态字段(字节码 getstatic putstatic) final修饰除外</li><li>初始化类的派生类</li><li>启动包含main方法的主类 <strong>使用</strong><strong>卸载gc</strong></li></ol></li></ul><h2 id="双亲委派模型" tabindex="-1"><a class="header-anchor" href="#双亲委派模型" aria-hidden="true">#</a> <strong>双亲委派模型</strong></h2><p>考虑到安全因素，Java核心API中定义类型不会被随意替换</p><p>受到加载请求向上委托去加载</p><p><strong>启动类加载器</strong> Bootstrap 加载jre/lib下jar包</p><p><strong>扩展类加载器</strong> Ext 加载 jre/lib/ext下jar包</p><p><strong>appclassloader</strong> 应用程序类路径下载java类</p><h2 id="异常机制" tabindex="-1"><a class="header-anchor" href="#异常机制" aria-hidden="true">#</a> 异常机制</h2><p>Throwable</p><p>Error(无法被处理错误，jvm自身错误等)</p><p>Exception(程序自身可处理异常)</p><p>RuntimeException 运行时异常 NPE</p><p>非RuntimeException 编译时异常 IOException</p><h2 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理" aria-hidden="true">#</a> 动态代理</h2><p><code>Proxy</code> 和 <code>InvocationHandler</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span> <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,53),c=[p];function l(i,u){return a(),s("div",null,c)}const k=n(o,[["render",l],["__file","index.html.vue"]]);export{k as default};
